/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Financas
 * API de gerenciamento de financas pessoais
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ApiResponse,
  CategoriesControllerFindAllParams,
  Category,
  CreateCategoryDto,
  PaginatedResponse,
  UpdateCategoryDto,
} from ".././schemas";

import { customInstance } from "../../axios-instance";
import type { ErrorType } from "../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Criar nova categoria
 */
export const categoriesControllerCreate = (
  createCategoryDto: CreateCategoryDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Category>(
    {
      url: `/categories`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCategoryDto,
      signal,
    },
    options,
  );
};

export const getCategoriesControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    TError,
    { data: CreateCategoryDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: CreateCategoryDto },
  TContext
> => {
  const mutationKey = ["categoriesControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerCreate>>,
    { data: CreateCategoryDto }
  > = (props) => {
    const { data } = props ?? {};

    return categoriesControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerCreate>>
>;
export type CategoriesControllerCreateMutationBody = CreateCategoryDto;
export type CategoriesControllerCreateMutationError = ErrorType<unknown>;

/**
 * @summary Criar nova categoria
 */
export const useCategoriesControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoriesControllerCreate>>,
      TError,
      { data: CreateCategoryDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerCreate>>,
  TError,
  { data: CreateCategoryDto },
  TContext
> => {
  const mutationOptions = getCategoriesControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Listar todas as categorias
 */
export const categoriesControllerFindAll = (
  params?: CategoriesControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginatedResponse>(
    { url: `/categories`, method: "GET", params, signal },
    options,
  );
};

export const getCategoriesControllerFindAllQueryKey = (
  params?: CategoriesControllerFindAllParams,
) => {
  return [`/categories`, ...(params ? [params] : [])] as const;
};

export const getCategoriesControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: CategoriesControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>
  > = ({ signal }) =>
    categoriesControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CategoriesControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindAll>>
>;
export type CategoriesControllerFindAllQueryError = ErrorType<unknown>;

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | CategoriesControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: CategoriesControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: CategoriesControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar todas as categorias
 */

export function useCategoriesControllerFindAll<
  TData = Awaited<ReturnType<typeof categoriesControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: CategoriesControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCategoriesControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Buscar categoria por ID
 */
export const categoriesControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponse>(
    { url: `/categories/${id}`, method: "GET", signal },
    options,
  );
};

export const getCategoriesControllerFindOneQueryKey = (id?: string) => {
  return [`/categories/${id}`] as const;
};

export const getCategoriesControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCategoriesControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>
  > = ({ signal }) => categoriesControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof categoriesControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CategoriesControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerFindOne>>
>;
export type CategoriesControllerFindOneQueryError = ErrorType<unknown>;

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof categoriesControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof categoriesControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar categoria por ID
 */

export function useCategoriesControllerFindOne<
  TData = Awaited<ReturnType<typeof categoriesControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof categoriesControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCategoriesControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Atualizar categoria
 */
export const categoriesControllerUpdate = (
  id: string,
  updateCategoryDto: UpdateCategoryDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ApiResponse>(
    {
      url: `/categories/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateCategoryDto,
    },
    options,
  );
};

export const getCategoriesControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    TError,
    { id: string; data: UpdateCategoryDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: UpdateCategoryDto },
  TContext
> => {
  const mutationKey = ["categoriesControllerUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerUpdate>>,
    { id: string; data: UpdateCategoryDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return categoriesControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>
>;
export type CategoriesControllerUpdateMutationBody = UpdateCategoryDto;
export type CategoriesControllerUpdateMutationError = ErrorType<unknown>;

/**
 * @summary Atualizar categoria
 */
export const useCategoriesControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoriesControllerUpdate>>,
      TError,
      { id: string; data: UpdateCategoryDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerUpdate>>,
  TError,
  { id: string; data: UpdateCategoryDto },
  TContext
> => {
  const mutationOptions = getCategoriesControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Excluir categoria
 */
export const categoriesControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<ApiResponse>(
    { url: `/categories/${id}`, method: "DELETE" },
    options,
  );
};

export const getCategoriesControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["categoriesControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof categoriesControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return categoriesControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CategoriesControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof categoriesControllerRemove>>
>;

export type CategoriesControllerRemoveMutationError = ErrorType<unknown>;

/**
 * @summary Excluir categoria
 */
export const useCategoriesControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof categoriesControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof categoriesControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getCategoriesControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
