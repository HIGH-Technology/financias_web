/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Financas
 * API de gerenciamento de financas pessoais
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  CreateInstallmentDto,
  Installment,
  InstallmentsControllerFindAllParams,
  UpdateInstallmentDto,
} from ".././schemas";

import { customInstance } from "../../axios-instance";
import type { ErrorType } from "../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Criar nova parcela
 */
export const installmentsControllerCreate = (
  createInstallmentDto: CreateInstallmentDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Installment>(
    {
      url: `/installments`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createInstallmentDto,
      signal,
    },
    options,
  );
};

export const getInstallmentsControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof installmentsControllerCreate>>,
    TError,
    { data: CreateInstallmentDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof installmentsControllerCreate>>,
  TError,
  { data: CreateInstallmentDto },
  TContext
> => {
  const mutationKey = ["installmentsControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof installmentsControllerCreate>>,
    { data: CreateInstallmentDto }
  > = (props) => {
    const { data } = props ?? {};

    return installmentsControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InstallmentsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof installmentsControllerCreate>>
>;
export type InstallmentsControllerCreateMutationBody = CreateInstallmentDto;
export type InstallmentsControllerCreateMutationError = ErrorType<unknown>;

/**
 * @summary Criar nova parcela
 */
export const useInstallmentsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof installmentsControllerCreate>>,
      TError,
      { data: CreateInstallmentDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof installmentsControllerCreate>>,
  TError,
  { data: CreateInstallmentDto },
  TContext
> => {
  const mutationOptions =
    getInstallmentsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Listar parcelas
 */
export const installmentsControllerFindAll = (
  params?: InstallmentsControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Installment[]>(
    { url: `/installments`, method: "GET", params, signal },
    options,
  );
};

export const getInstallmentsControllerFindAllQueryKey = (
  params?: InstallmentsControllerFindAllParams,
) => {
  return [`/installments`, ...(params ? [params] : [])] as const;
};

export const getInstallmentsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof installmentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: InstallmentsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getInstallmentsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof installmentsControllerFindAll>>
  > = ({ signal }) =>
    installmentsControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof installmentsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InstallmentsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof installmentsControllerFindAll>>
>;
export type InstallmentsControllerFindAllQueryError = ErrorType<unknown>;

export function useInstallmentsControllerFindAll<
  TData = Awaited<ReturnType<typeof installmentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | InstallmentsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof installmentsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof installmentsControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInstallmentsControllerFindAll<
  TData = Awaited<ReturnType<typeof installmentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: InstallmentsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof installmentsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof installmentsControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInstallmentsControllerFindAll<
  TData = Awaited<ReturnType<typeof installmentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: InstallmentsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar parcelas
 */

export function useInstallmentsControllerFindAll<
  TData = Awaited<ReturnType<typeof installmentsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: InstallmentsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getInstallmentsControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Buscar parcela por ID
 */
export const installmentsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Installment>(
    { url: `/installments/${id}`, method: "GET", signal },
    options,
  );
};

export const getInstallmentsControllerFindOneQueryKey = (id?: string) => {
  return [`/installments/${id}`] as const;
};

export const getInstallmentsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof installmentsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getInstallmentsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof installmentsControllerFindOne>>
  > = ({ signal }) => installmentsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof installmentsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type InstallmentsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof installmentsControllerFindOne>>
>;
export type InstallmentsControllerFindOneQueryError = ErrorType<void>;

export function useInstallmentsControllerFindOne<
  TData = Awaited<ReturnType<typeof installmentsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof installmentsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof installmentsControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInstallmentsControllerFindOne<
  TData = Awaited<ReturnType<typeof installmentsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof installmentsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof installmentsControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useInstallmentsControllerFindOne<
  TData = Awaited<ReturnType<typeof installmentsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar parcela por ID
 */

export function useInstallmentsControllerFindOne<
  TData = Awaited<ReturnType<typeof installmentsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof installmentsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getInstallmentsControllerFindOneQueryOptions(
    id,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Atualizar parcela
 */
export const installmentsControllerUpdate = (
  id: string,
  updateInstallmentDto: UpdateInstallmentDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Installment>(
    {
      url: `/installments/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateInstallmentDto,
    },
    options,
  );
};

export const getInstallmentsControllerUpdateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof installmentsControllerUpdate>>,
    TError,
    { id: string; data: UpdateInstallmentDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof installmentsControllerUpdate>>,
  TError,
  { id: string; data: UpdateInstallmentDto },
  TContext
> => {
  const mutationKey = ["installmentsControllerUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof installmentsControllerUpdate>>,
    { id: string; data: UpdateInstallmentDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return installmentsControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InstallmentsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof installmentsControllerUpdate>>
>;
export type InstallmentsControllerUpdateMutationBody = UpdateInstallmentDto;
export type InstallmentsControllerUpdateMutationError = ErrorType<void>;

/**
 * @summary Atualizar parcela
 */
export const useInstallmentsControllerUpdate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof installmentsControllerUpdate>>,
      TError,
      { id: string; data: UpdateInstallmentDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof installmentsControllerUpdate>>,
  TError,
  { id: string; data: UpdateInstallmentDto },
  TContext
> => {
  const mutationOptions =
    getInstallmentsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Excluir parcela
 */
export const installmentsControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/installments/${id}`, method: "DELETE" },
    options,
  );
};

export const getInstallmentsControllerRemoveMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof installmentsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof installmentsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["installmentsControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof installmentsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return installmentsControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type InstallmentsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof installmentsControllerRemove>>
>;

export type InstallmentsControllerRemoveMutationError = ErrorType<void>;

/**
 * @summary Excluir parcela
 */
export const useInstallmentsControllerRemove = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof installmentsControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof installmentsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getInstallmentsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
