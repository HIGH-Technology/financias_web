/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Financas
 * API de gerenciamento de financas pessoais
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  Billing,
  BillingsControllerFindAllParams,
  CreateBillingDto,
  UpdateBillingDto,
} from ".././schemas";

import { customInstance } from "../../axios-instance";
import type { ErrorType } from "../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Criar nova cobran√ßa
 */
export const billingsControllerCreate = (
  createBillingDto: CreateBillingDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Billing>(
    {
      url: `/billings`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createBillingDto,
      signal,
    },
    options,
  );
};

export const getBillingsControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof billingsControllerCreate>>,
    TError,
    { data: CreateBillingDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof billingsControllerCreate>>,
  TError,
  { data: CreateBillingDto },
  TContext
> => {
  const mutationKey = ["billingsControllerCreate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof billingsControllerCreate>>,
    { data: CreateBillingDto }
  > = (props) => {
    const { data } = props ?? {};

    return billingsControllerCreate(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BillingsControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerCreate>>
>;
export type BillingsControllerCreateMutationBody = CreateBillingDto;
export type BillingsControllerCreateMutationError = ErrorType<unknown>;

/**
 * @summary Criar nova cobran√ßa
 */
export const useBillingsControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof billingsControllerCreate>>,
      TError,
      { data: CreateBillingDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof billingsControllerCreate>>,
  TError,
  { data: CreateBillingDto },
  TContext
> => {
  const mutationOptions = getBillingsControllerCreateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Listar cobran√ßas
 */
export const billingsControllerFindAll = (
  params?: BillingsControllerFindAllParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Billing[]>(
    { url: `/billings`, method: "GET", params, signal },
    options,
  );
};

export const getBillingsControllerFindAllQueryKey = (
  params?: BillingsControllerFindAllParams,
) => {
  return [`/billings`, ...(params ? [params] : [])] as const;
};

export const getBillingsControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof billingsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: BillingsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBillingsControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof billingsControllerFindAll>>
  > = ({ signal }) => billingsControllerFindAll(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof billingsControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillingsControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerFindAll>>
>;
export type BillingsControllerFindAllQueryError = ErrorType<unknown>;

export function useBillingsControllerFindAll<
  TData = Awaited<ReturnType<typeof billingsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | BillingsControllerFindAllParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindAll<
  TData = Awaited<ReturnType<typeof billingsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: BillingsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindAll>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindAll<
  TData = Awaited<ReturnType<typeof billingsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: BillingsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar cobran√ßas
 */

export function useBillingsControllerFindAll<
  TData = Awaited<ReturnType<typeof billingsControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  params?: BillingsControllerFindAllParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindAll>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBillingsControllerFindAllQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Listar minhas cobran√ßas
 */
export const billingsControllerFindMyBillings = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Billing[]>(
    { url: `/billings/my`, method: "GET", signal },
    options,
  );
};

export const getBillingsControllerFindMyBillingsQueryKey = () => {
  return [`/billings/my`] as const;
};

export const getBillingsControllerFindMyBillingsQueryOptions = <
  TData = Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBillingsControllerFindMyBillingsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof billingsControllerFindMyBillings>>
  > = ({ signal }) => billingsControllerFindMyBillings(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillingsControllerFindMyBillingsQueryResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerFindMyBillings>>
>;
export type BillingsControllerFindMyBillingsQueryError = ErrorType<unknown>;

export function useBillingsControllerFindMyBillings<
  TData = Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindMyBillings>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindMyBillings<
  TData = Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindMyBillings>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindMyBillings<
  TData = Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Listar minhas cobran√ßas
 */

export function useBillingsControllerFindMyBillings<
  TData = Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindMyBillings>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBillingsControllerFindMyBillingsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Buscar cobran√ßa por ID
 */
export const billingsControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Billing>(
    { url: `/billings/${id}`, method: "GET", signal },
    options,
  );
};

export const getBillingsControllerFindOneQueryKey = (id?: string) => {
  return [`/billings/${id}`] as const;
};

export const getBillingsControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof billingsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getBillingsControllerFindOneQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof billingsControllerFindOne>>
  > = ({ signal }) => billingsControllerFindOne(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof billingsControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type BillingsControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerFindOne>>
>;
export type BillingsControllerFindOneQueryError = ErrorType<void>;

export function useBillingsControllerFindOne<
  TData = Awaited<ReturnType<typeof billingsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindOne<
  TData = Awaited<ReturnType<typeof billingsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof billingsControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof billingsControllerFindOne>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useBillingsControllerFindOne<
  TData = Awaited<ReturnType<typeof billingsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Buscar cobran√ßa por ID
 */

export function useBillingsControllerFindOne<
  TData = Awaited<ReturnType<typeof billingsControllerFindOne>>,
  TError = ErrorType<void>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof billingsControllerFindOne>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getBillingsControllerFindOneQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Atualizar cobran√ßa
 */
export const billingsControllerUpdate = (
  id: string,
  updateBillingDto: UpdateBillingDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Billing>(
    {
      url: `/billings/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateBillingDto,
    },
    options,
  );
};

export const getBillingsControllerUpdateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof billingsControllerUpdate>>,
    TError,
    { id: string; data: UpdateBillingDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof billingsControllerUpdate>>,
  TError,
  { id: string; data: UpdateBillingDto },
  TContext
> => {
  const mutationKey = ["billingsControllerUpdate"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof billingsControllerUpdate>>,
    { id: string; data: UpdateBillingDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return billingsControllerUpdate(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BillingsControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerUpdate>>
>;
export type BillingsControllerUpdateMutationBody = UpdateBillingDto;
export type BillingsControllerUpdateMutationError = ErrorType<void>;

/**
 * @summary Atualizar cobran√ßa
 */
export const useBillingsControllerUpdate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof billingsControllerUpdate>>,
      TError,
      { id: string; data: UpdateBillingDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof billingsControllerUpdate>>,
  TError,
  { id: string; data: UpdateBillingDto },
  TContext
> => {
  const mutationOptions = getBillingsControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Excluir cobran√ßa
 */
export const billingsControllerRemove = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/billings/${id}`, method: "DELETE" },
    options,
  );
};

export const getBillingsControllerRemoveMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof billingsControllerRemove>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof billingsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["billingsControllerRemove"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof billingsControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return billingsControllerRemove(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type BillingsControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof billingsControllerRemove>>
>;

export type BillingsControllerRemoveMutationError = ErrorType<void>;

/**
 * @summary Excluir cobran√ßa
 */
export const useBillingsControllerRemove = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof billingsControllerRemove>>,
      TError,
      { id: string },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof billingsControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getBillingsControllerRemoveMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
