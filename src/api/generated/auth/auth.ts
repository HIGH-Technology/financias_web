/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Financas
 * API de gerenciamento de financas pessoais
 * OpenAPI spec version: 1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type { ApiResponse, CreateUserDto, LoginDto } from ".././schemas";

import { customInstance } from "../../axios-instance";
import type { ErrorType } from "../../axios-instance";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Fazer login no sistema
 */
export const authControllerLogin = (
  loginDto: LoginDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponse>(
    {
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerLoginMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerLogin>>,
    TError,
    { data: LoginDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationKey = ["authControllerLogin"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerLogin>>,
    { data: LoginDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerLogin(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerLogin>>
>;
export type AuthControllerLoginMutationBody = LoginDto;
export type AuthControllerLoginMutationError = ErrorType<void>;

/**
 * @summary Fazer login no sistema
 */
export const useAuthControllerLogin = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerLogin>>,
      TError,
      { data: LoginDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerLogin>>,
  TError,
  { data: LoginDto },
  TContext
> => {
  const mutationOptions = getAuthControllerLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Registrar novo usu√°rio
 */
export const authControllerRegister = (
  createUserDto: CreateUserDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ApiResponse>(
    {
      url: `/auth/register`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createUserDto,
      signal,
    },
    options,
  );
};

export const getAuthControllerRegisterMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof authControllerRegister>>,
    TError,
    { data: CreateUserDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationKey = ["authControllerRegister"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof authControllerRegister>>,
    { data: CreateUserDto }
  > = (props) => {
    const { data } = props ?? {};

    return authControllerRegister(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type AuthControllerRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof authControllerRegister>>
>;
export type AuthControllerRegisterMutationBody = CreateUserDto;
export type AuthControllerRegisterMutationError = ErrorType<void>;

/**
 * @summary Registrar novo usu√°rio
 */
export const useAuthControllerRegister = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof authControllerRegister>>,
      TError,
      { data: CreateUserDto },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof authControllerRegister>>,
  TError,
  { data: CreateUserDto },
  TContext
> => {
  const mutationOptions = getAuthControllerRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
